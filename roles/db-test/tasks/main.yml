---
- name: Define postgresql_packages.
  set_fact:
    postgresql_packages:
        - postgresql
        - postgresql-contrib
        - libpq-dev
  when: postgresql_packages is not defined

- name: Define postgresql_version.
  set_fact:
    postgresql_version: "14"
  when: postgresql_version is not defined

- name: Define postgresql_daemon.
  set_fact:
    postgresql_daemon: postgresql
  when: postgresql_daemon is not defined

- name: Define postgresql_data_dir.
  set_fact:
    postgresql_data_dir: "/var/lib/postgresql/{{ postgresql_version }}/main"
  when: postgresql_data_dir is not defined

- name: Define postgresql_bin_path.
  set_fact:
    postgresql_bin_path: "/usr/lib/postgresql/{{ postgresql_version }}/bin"
  when: postgresql_bin_path is not defined

- name: Define postgresql_config_path.
  set_fact:
    postgresql_config_path: "/etc/postgresql/{{ postgresql_version }}/main"
  when: postgresql_config_path is not defined

- name: Define postgresql_unix_socket_directories_mode.
  set_fact:
    postgresql_unix_socket_directories_mode: >-
      {{ __postgresql_unix_socket_directories_mode | default('02775') }}
  when: postgresql_unix_socket_directories_mode is not defined

- name: Define postgresql_log_dir.
  set_fact:
    # postgresql_global_config_options is an array but its keys are unique, so it can be converted to dict,
    # to easily get the value under the 'log_directory' key
    postgresql_log_dir: "{{ (postgresql_global_config_options | items2dict(key_name='option', value_name='value')).log_directory }}"

- name: Define postgresql_effective_log_dir, if postgresql_log_dir is absolute
  set_fact:
    postgresql_effective_log_dir: '{{ postgresql_log_dir }}'
  when: postgresql_log_dir is match("/")

- name: Define postgresql_effective_log_dir, if postgresql_log_dir is relative
  set_fact:
    postgresql_effective_log_dir: '{{ postgresql_data_dir }}/{{ postgresql_log_dir }}'
  when: postgresql_log_dir is not match("/")


- name: Ensure PostgreSQL Python libraries are installed.
  apt:
    name: python3-psycopg2
    state: present

- name: Ensure PostgreSQL packages are installed.
  apt:
    name: "{{ postgresql_packages }}"
    state: present

- name: Ensure all configured locales are present.
  locale_gen: "name={{ item }} state=present"
  with_items: "{{ postgresql_locales }}"
  register: locale_gen_result

- name: Force-restart PostgreSQL after new locales are generated.
  service:
    name: "{{ postgresql_daemon }}"
    state: restarted
  when: locale_gen_result.changed

- name: Set PostgreSQL environment variables.
  template:
    src: postgres.sh.j2
    dest: /etc/profile.d/postgres.sh
    mode: 0644
  notify: restart postgresql

- name: Ensure PostgreSQL data directory exists.
  file:
    path: "{{ postgresql_data_dir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700

- name: Check if PostgreSQL database is initialized.
  stat:
    path: "{{ postgresql_data_dir }}/PG_VERSION"
  register: pgdata_dir_version

- name: Ensure PostgreSQL database is initialized.
  command: "{{ postgresql_bin_path }}/initdb -D {{ postgresql_data_dir }}"
  when: not pgdata_dir_version.stat.exists
  become: true
  become_user: "{{ postgresql_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true

- name: Ensure PostgreSQL log directory exists.
  file:
    path: "{{ postgresql_effective_log_dir }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700

- name: Configure global settings.
  lineinfile:
    dest: "{{ postgresql_config_path }}/postgresql.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} = '{{ item.value }}'"
    state: "{{ item.state | default('present') }}"
    mode: 0644
  with_items: "{{ postgresql_global_config_options }}"
  notify: restart postgresql

- name: Configure host based authentication (if entries are configured).
  template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgresql_config_path }}/pg_hba.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0600
  notify: restart postgresql
  when: postgresql_hba_entries | length > 0

- name: Ensure PostgreSQL unix socket dirs exist.
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: "{{ postgresql_unix_socket_directories_mode }}"
  with_items: "{{ postgresql_unix_socket_directories }}"


- name: Ensure PostgreSQL is started and enabled on boot.
  service:
    name: "{{ postgresql_daemon }}"
    state: "{{ postgresql_service_state }}"
    enabled: "{{ postgresql_service_enabled }}"

- name: Ensure PostgreSQL users are present.
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
  with_items: "{{ postgresql_users }}"
  no_log: "{{ postgres_users_no_log }}"
  become: true
  become_user: "{{ postgresql_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true
  environment:
    PGOPTIONS: "{{ (postgresql_auth_method == 'scram-sha-256') | ternary('-c password_encryption=scram-sha-256', '') }}"

- name: Ensure PostgreSQL databases are present.
  postgresql_db:
    name: "{{ item.name }}"
    lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
    encoding: "{{ item.encoding | default('UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    owner: "{{ item.owner | default(postgresql_user) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_databases }}"
  become: true
  become_user: "{{ postgresql_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true

- name: Ensure PostgreSQL users are configured correctly.
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    encrypted: "{{ item.encrypted | default(omit) }}"
    privs: "{{ item.privs | default(omit) }}"
    role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
    db: "{{ item.db | default(omit) }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_users }}"
  no_log: "{{ postgres_users_no_log }}"
  become: true
  become_user: "{{ postgresql_user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true
  environment:
    PGOPTIONS: "{{ (postgresql_auth_method == 'scram-sha-256') | ternary('-c password_encryption=scram-sha-256', '') }}"

