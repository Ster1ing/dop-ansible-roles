- name: Start message
  ansible.builtin.debug:
    msg: 'Create task to install and preparing DB server'

- name: Generate for database
  ansible.builtin.set_fact:
    login_user: root
    login_pass: lookup('community.general.random_string')
    root_pass: lookup('community.general.random_string')
  when: lookup('ansible.builtin.env', 'CI') == 'true'

- name: "Install packages"
  apt: "name={{ item }} state=present"
  with_items:
    - postgresql
    - postgresql-client

- name: "Install Python packages"
  pip: "name={{ item }}  state=present"
  with_items:
    - psycopg2-binary

- name: "Find out if PostgreSQL is initialized"
  ansible.builtin.stat:
    path: "/var/lib/pgsql/data/pg_hba.conf"
  register: postgres_data    

#- name: "Initialize PostgreSQL"
#  shell: /usr/pgsql-14/bin/postgresql-setup initdb
#  when: not postgres_data.stat.exists

- name: "Start and enable services"
  service: "name={{ item }} state=started enabled=yes"
  with_items:
    - postgresql
  #notify: restart postgresql

- name: Create the database specified in vars
  become: true
  become_user: postgres
  postgresql_db: name={{ db_name }}
      template='template0'
      state=present

- name: Configure PostgreSQL authentication
  template:
    src: pg_hba.conf.j2
    dest: /etc/postgresql/14/main/pg_hba.conf
  notify: restart postgresql

- name: Ensure user has access to the new database
  become: true
  become_user: postgres
  postgresql_user: db={{ db_name }}
      name={{ db_user }}
      password={{ db_pass }}
      priv=ALL
      state=present

- name: Ensure user does not have unnecessary permissions
  become: true
  become_user: postgres
  postgresql_user: name={{ db_user }}
      role_attr_flags=NOSUPERUSER,NOCREATEDB
      state=present

- name: Create symbolic link 
  file:
    src: "/tmp/.s.PGSQL.5432"
    dest: "/var/run/postgresql/.s.PGSQL.5432"
    state: link

#- name: Copy project to server
#  ansible.builtin.copy:
#    src: /tmp/.s.PGSQL.5432
#    dest: /var/run/postgresql/.s.PGSQL.5432
#    remote_src: true

- name: "Grant db user access to app db"
  postgresql_privs:
    type: database
    database: "{{ db_name }}"
    roles: "{{ db_user }}"
    grant_option: no
    privs: ALL
  become: true
  become_user: postgres 

- name: GRANT ALL PRIVILEGES ON SCHEMA public 
  postgresql_privs:
    db: "{{ db_name }}"
    privs: ALL
    type: schema
    objs: public 
    role: "{{ db_user }}"

- name: "Allow md5 connection for the db user"
  postgresql_pg_hba:
    dest: /etc/postgresql/14/main/pg_hba.conf
    contype: host
    databases: all
    method: md5
    users: "{{ db_user }}"
    create: true
  become: true
  become_user: postgres
  notify: restart postgresql